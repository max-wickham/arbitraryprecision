import math

private_key = 284405200190476652636583234372541649370526224895762840695503
public_key = 445301584994346453012118919439931240996572468064530277126343
n = 2187839002660177558549082793312254678028841684853866765388741
message = 123456798911111111
encrypted = pow(message,private_key,n)
decrypted = pow(encrypted,public_key,n)
print(encrypted)
print(decrypted)
def lcm(a, b):
    return abs(a*b) // math.gcd(a, b)

def egcd(a, b):
    if a == 0:
        return b, 0, 1
    else:
        gcd, x, y = egcd(b % a, a)
        return gcd, y - (b // a) * x, x

p = 958848530734806558469362063673
q = 2281735782588667201490842043117
ctf = 546959750665044389637270698327253523428879552773476640320488
e = 284405200190476652636583234372541649370526224895762840695503
x = 535168703378772082970349234974804930595512871303856371
y = 2361166576332296265316971844729655955742714733190719037179
d = 5425363983472912063393951782039610607513408634414716366649
correct_d = 445301584994346453012118919439931240996572468064530277126343

cg,cx,cy = egcd(e,ctf)
print(cx)
print(lcm(p-1,q-1) == ctf)
print(e<ctf)
print(math.gcd(ctf,e) == 1)
print(pow(e, -1, ctf))
print((d*e % ctf) == 1)
#print(d ==  pow(e, -1, ctf))
#check that d is correct